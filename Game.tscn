[gd_scene load_steps=11 format=2]

[ext_resource path="res://scripts/Game.gd" type="Script" id=1]
[ext_resource path="res://assets/grass/Ground03_col.jpg" type="Texture" id=2]
[ext_resource path="res://assets/grass/Ground03_disp.jpg" type="Texture" id=3]
[ext_resource path="res://assets/grass/Ground03_nrm.jpg" type="Texture" id=4]
[ext_resource path="res://assets/grass/Ground03_rgh.jpg" type="Texture" id=5]
[ext_resource path="res://Player.tscn" type="PackedScene" id=6]

[sub_resource type="CubeMesh" id=1]
size = Vector3( 1000, 1, 1000 )

[sub_resource type="SpatialMaterial" id=2]
albedo_texture = ExtResource( 2 )
roughness = 0.61
roughness_texture = ExtResource( 5 )
roughness_texture_channel = 3
normal_enabled = true
normal_scale = 5.5
normal_texture = ExtResource( 4 )
clearcoat_enabled = true
clearcoat = 1.0
clearcoat_gloss = 0.5
depth_enabled = true
depth_scale = 2.0
depth_deep_parallax = true
depth_min_layers = 8
depth_max_layers = 32
depth_flip_tangent = false
depth_flip_binormal = false
depth_texture = ExtResource( 3 )
uv1_scale = Vector3( 0.25, 0.25, 0.25 )
uv1_triplanar = true

[sub_resource type="ConcavePolygonShape" id=3]
data = PoolVector3Array( -50, 0.5, 50, 50, 0.5, 50, -50, -0.5, 50, 50, 0.5, 50, 50, -0.5, 50, -50, -0.5, 50, 50, 0.5, -50, -50, 0.5, -50, 50, -0.5, -50, -50, 0.5, -50, -50, -0.5, -50, 50, -0.5, -50, 50, 0.5, 50, 50, 0.5, -50, 50, -0.5, 50, 50, 0.5, -50, 50, -0.5, -50, 50, -0.5, 50, -50, 0.5, -50, -50, 0.5, 50, -50, -0.5, -50, -50, 0.5, 50, -50, -0.5, 50, -50, -0.5, -50, 50, 0.5, 50, -50, 0.5, 50, 50, 0.5, -50, -50, 0.5, 50, -50, 0.5, -50, 50, 0.5, -50, -50, -0.5, 50, 50, -0.5, 50, -50, -0.5, -50, 50, -0.5, 50, 50, -0.5, -50, -50, -0.5, -50 )

[sub_resource type="GDScript" id=4]
script/source = "extends KinematicBody

const GRAVITY = -24.8
var vel = Vector3()
const MAX_SPEED = 20
const JUMP_SPEED = 18
const ACCEL = 4.5

var dir = Vector3()
var laminar

const DEACCEL= 16
const MAX_SLOPE_ANGLE = 40

var camera
var rotation_helper
var global

var MOUSE_SENSITIVITY = 0.05

signal moved

func _ready():
    laminar = get_node(\"/root/Global\").laminar
    laminar.send(\"game:foo\")
    global = get_node(\"/root/Global\")
    rotation_helper = get_node(\"Yaw\")
    camera = get_node(\"Yaw/Camera\")
    self.connect(\"moved\", self, \"on_moved\")
    Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _physics_process(delta):
    process_input(delta)
    process_movement(delta)

func process_input(delta):
	
    # ----------------------------------
    # Walking
    dir = Vector3()
    var cam_xform = camera.get_global_transform()

    var input_movement_vector = Vector2()

    if Input.is_action_pressed(\"forward\"):
        input_movement_vector.y += 1
        emit_signal(\"moved\")
    if Input.is_action_pressed(\"backward\"):
        input_movement_vector.y -= 1
        emit_signal(\"moved\")
    if Input.is_action_pressed(\"left\"):
        input_movement_vector.x -= 1
        emit_signal(\"moved\")
    if Input.is_action_pressed(\"right\"):
        input_movement_vector.x += 1
        emit_signal(\"moved\")

    input_movement_vector = input_movement_vector.normalized()

    dir += -cam_xform.basis.z.normalized() * input_movement_vector.y
    dir += cam_xform.basis.x.normalized() * input_movement_vector.x
    # ----------------------------------

    # ----------------------------------
    # Jumping
    if is_on_floor():
        if Input.is_action_just_pressed(\"movement_jump\"):
            vel.y = JUMP_SPEED
    # ----------------------------------

    # ----------------------------------
    # Capturing/Freeing the cursor
    if Input.is_action_just_pressed(\"ui_cancel\"):
        if Input.get_mouse_mode() == Input.MOUSE_MODE_VISIBLE:
            Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
        else:
            Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
    # ----------------------------------

func process_movement(delta):
    dir.y = 0
    dir = dir.normalized()

    vel.y += delta * GRAVITY

    var hvel = vel
    hvel.y = 0

    var target = dir
    target *= MAX_SPEED

    var accel
    if dir.dot(hvel) > 0:
        accel = ACCEL
    else:
        accel = DEACCEL

    hvel = hvel.linear_interpolate(target, accel * delta)
    vel.x = hvel.x
    vel.z = hvel.z
    vel = move_and_slide(vel, Vector3(0, 1, 0), 0.05, 4, deg2rad(MAX_SLOPE_ANGLE))

func _input(event):
    if event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
        rotation_helper.rotate_x(deg2rad(event.relative.y * MOUSE_SENSITIVITY))
        self.rotate_y(deg2rad(event.relative.x * MOUSE_SENSITIVITY * -1))
        camera.rotate_x(-deg2rad(event.relative.y * MOUSE_SENSITIVITY * -1))
        var camera_rot = rotation_helper.rotation_degrees
        camera_rot.x = clamp(camera_rot.x, -70, 70)
        rotation_helper.rotation_degrees = camera_rot

func on_network_received(data):
    print(\"Player got data: \", data)

func on_moved():
    var pos = self.get_global_transform().origin
    var fields = String(global.network_id) + \";\" + String(pos.x) + \";\" + String(pos.y) + \";\" + String(pos.z)
    laminar.send(\"plrmov:\" + fields)
    "

[node name="Game" type="Spatial"]
script = ExtResource( 1 )

[node name="Ground" type="MeshInstance" parent="."]
editor/display_folded = true
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 2 )

[node name="StaticBody" type="StaticBody" parent="Ground"]

[node name="CollisionShape" type="CollisionShape" parent="Ground/StaticBody"]
shape = SubResource( 3 )

[node name="Player" parent="." instance=ExtResource( 6 )]
script = SubResource( 4 )

